// Generated by gencpp from file see_ego_motion_ukf/Vehicle.msg
// DO NOT EDIT!


#ifndef SEE_EGO_MOTION_UKF_MESSAGE_VEHICLE_H
#define SEE_EGO_MOTION_UKF_MESSAGE_VEHICLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace see_ego_motion_ukf
{
template <class ContainerAllocator>
struct Vehicle_
{
  typedef Vehicle_<ContainerAllocator> Type;

  Vehicle_()
    : header()
    , valid(false)
    , yaw_rate(0.0)
    , velocity(0.0)
    , acceleration(0.0)
    , x_std(0.0)
    , y_std(0.0)
    , yaw_std(0.0)
    , yaw_rate_std(0.0)
    , velocity_std(0.0)
    , acceleration_std(0.0)  {
    }
  Vehicle_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , valid(false)
    , yaw_rate(0.0)
    , velocity(0.0)
    , acceleration(0.0)
    , x_std(0.0)
    , y_std(0.0)
    , yaw_std(0.0)
    , yaw_rate_std(0.0)
    , velocity_std(0.0)
    , acceleration_std(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _valid_type;
  _valid_type valid;

   typedef double _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef double _acceleration_type;
  _acceleration_type acceleration;

   typedef double _x_std_type;
  _x_std_type x_std;

   typedef double _y_std_type;
  _y_std_type y_std;

   typedef double _yaw_std_type;
  _yaw_std_type yaw_std;

   typedef double _yaw_rate_std_type;
  _yaw_rate_std_type yaw_rate_std;

   typedef double _velocity_std_type;
  _velocity_std_type velocity_std;

   typedef double _acceleration_std_type;
  _acceleration_std_type acceleration_std;





  typedef boost::shared_ptr< ::see_ego_motion_ukf::Vehicle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::see_ego_motion_ukf::Vehicle_<ContainerAllocator> const> ConstPtr;

}; // struct Vehicle_

typedef ::see_ego_motion_ukf::Vehicle_<std::allocator<void> > Vehicle;

typedef boost::shared_ptr< ::see_ego_motion_ukf::Vehicle > VehiclePtr;
typedef boost::shared_ptr< ::see_ego_motion_ukf::Vehicle const> VehicleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::see_ego_motion_ukf::Vehicle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::see_ego_motion_ukf::Vehicle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace see_ego_motion_ukf

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'see_ego_motion_ukf': ['/home/julien/GFR/ego_motion/gfr19d_ws/src/see_ego_motion_ukf/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::see_ego_motion_ukf::Vehicle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::see_ego_motion_ukf::Vehicle_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::see_ego_motion_ukf::Vehicle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::see_ego_motion_ukf::Vehicle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::see_ego_motion_ukf::Vehicle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::see_ego_motion_ukf::Vehicle_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::see_ego_motion_ukf::Vehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4e985627fcd55ed6ae39a59f1414f67b";
  }

  static const char* value(const ::see_ego_motion_ukf::Vehicle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4e985627fcd55ed6ULL;
  static const uint64_t static_value2 = 0xae39a59f1414f67bULL;
};

template<class ContainerAllocator>
struct DataType< ::see_ego_motion_ukf::Vehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "see_ego_motion_ukf/Vehicle";
  }

  static const char* value(const ::see_ego_motion_ukf::Vehicle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::see_ego_motion_ukf::Vehicle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
bool valid\n\
float64 yaw_rate\n\
float64 velocity\n\
float64 acceleration\n\
float64 x_std\n\
float64 y_std\n\
float64 yaw_std\n\
float64 yaw_rate_std\n\
float64 velocity_std\n\
float64 acceleration_std\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::see_ego_motion_ukf::Vehicle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::see_ego_motion_ukf::Vehicle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.valid);
      stream.next(m.yaw_rate);
      stream.next(m.velocity);
      stream.next(m.acceleration);
      stream.next(m.x_std);
      stream.next(m.y_std);
      stream.next(m.yaw_std);
      stream.next(m.yaw_rate_std);
      stream.next(m.velocity_std);
      stream.next(m.acceleration_std);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vehicle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::see_ego_motion_ukf::Vehicle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::see_ego_motion_ukf::Vehicle_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid);
    s << indent << "yaw_rate: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "acceleration: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration);
    s << indent << "x_std: ";
    Printer<double>::stream(s, indent + "  ", v.x_std);
    s << indent << "y_std: ";
    Printer<double>::stream(s, indent + "  ", v.y_std);
    s << indent << "yaw_std: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_std);
    s << indent << "yaw_rate_std: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rate_std);
    s << indent << "velocity_std: ";
    Printer<double>::stream(s, indent + "  ", v.velocity_std);
    s << indent << "acceleration_std: ";
    Printer<double>::stream(s, indent + "  ", v.acceleration_std);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SEE_EGO_MOTION_UKF_MESSAGE_VEHICLE_H
